#!/bin/bash

# Malware Scanning Script for alteriom-docker-images
# Performs malware detection using ClamAV and other tools

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCAN_RESULTS_DIR="${SCAN_RESULTS_DIR:-malware-scan-results}"
QUARANTINE_DIR="${QUARANTINE_DIR:-quarantine}"

# Create directories
mkdir -p "$SCAN_RESULTS_DIR" "$QUARANTINE_DIR"

echo -e "${BLUE}🦠 Malware Scanning for alteriom-docker-images${NC}"
echo "=============================================="
echo "Timestamp: $(date -u)"
echo "Results Dir: $SCAN_RESULTS_DIR"
echo ""

# Function to print status
print_status() {
    local status=$1
    local message=$2
    case $status in
        "SUCCESS") echo -e "${GREEN}✅ $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}⚠️  $message${NC}" ;;
        "ERROR") echo -e "${RED}❌ $message${NC}" ;;
        "INFO") echo -e "${BLUE}ℹ️  $message${NC}" ;;
    esac
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Install ClamAV if needed
install_clamav() {
    if ! command_exists clamscan; then
        print_status "INFO" "Installing ClamAV..."
        
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt-get update
            sudo apt-get install -y clamav clamav-daemon clamav-freshclam
            
            # Update virus definitions
            print_status "INFO" "Updating virus definitions..."
            sudo freshclam || {
                print_status "WARNING" "Could not update virus definitions automatically"
                print_status "INFO" "Trying alternative update method..."
                sudo systemctl stop clamav-freshclam 2>/dev/null || true
                sudo freshclam --verbose || true
                sudo systemctl start clamav-freshclam 2>/dev/null || true
            }
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            brew install clamav
            freshclam
        else
            print_status "ERROR" "ClamAV auto-install not supported on this OS"
            return 1
        fi
    else
        print_status "SUCCESS" "ClamAV already installed"
        
        # Update virus definitions
        print_status "INFO" "Updating virus definitions..."
        sudo freshclam --quiet || {
            print_status "WARNING" "Could not update virus definitions"
        }
    fi
}

# Scan source code for malware
scan_source_code() {
    print_status "INFO" "Scanning source code for malware..."
    
    local scan_log="$SCAN_RESULTS_DIR/clamav-source-scan.log"
    local infected_files="$SCAN_RESULTS_DIR/infected-files.txt"
    
    # Exclude certain directories and file types
    local exclude_dirs=(
        ".git"
        "node_modules"
        ".docker"
        "build"
        "dist"
        "__pycache__"
    )
    
    local exclude_patterns=""
    for dir in "${exclude_dirs[@]}"; do
        exclude_patterns="$exclude_patterns --exclude-dir=$dir"
    done
    
    if command_exists clamscan; then
        # Run ClamAV scan
        clamscan \
            --recursive \
            --verbose \
            --log="$scan_log" \
            --infected \
            --remove=no \
            --bell \
            $exclude_patterns \
            . 2>&1 || {
            
            # Check if any infections were found
            if grep -q "FOUND" "$scan_log"; then
                print_status "ERROR" "Malware detected in source code!"
                grep "FOUND" "$scan_log" | tee "$infected_files"
                
                # Move infected files to quarantine
                while IFS= read -r line; do
                    if [[ "$line" =~ (.+):.*FOUND ]]; then
                        infected_file="${BASH_REMATCH[1]}"
                        if [[ -f "$infected_file" ]]; then
                            print_status "WARNING" "Quarantining: $infected_file"
                            mv "$infected_file" "$QUARANTINE_DIR/"
                        fi
                    fi
                done < "$infected_files"
                
                return 1
            else
                print_status "SUCCESS" "No malware detected in source code"
            fi
        }
    else
        print_status "WARNING" "ClamAV not available for source code scanning"
    fi
}

# Scan Docker images for malware
scan_docker_images() {
    print_status "INFO" "Scanning Docker images for malware..."
    
    local images=(
        "ghcr.io/sparck75/alteriom-docker-images/builder:latest"
        "ghcr.io/sparck75/alteriom-docker-images/dev:latest"
    )
    
    for image in "${images[@]}"; do
        print_status "INFO" "Scanning image: $image"
        
        # Check if image exists locally or can be pulled
        if ! docker image inspect "$image" >/dev/null 2>&1; then
            print_status "INFO" "Pulling image: $image"
            if ! docker pull "$image" 2>/dev/null; then
                print_status "WARNING" "Could not pull image: $image"
                continue
            fi
        fi
        
        local image_name=$(echo "$image" | sed 's/.*\///' | sed 's/:/-/')
        local container_name="malware-scan-${image_name}"
        local scan_log="$SCAN_RESULTS_DIR/clamav-${image_name}-scan.log"
        
        # Run container and scan its filesystem
        if command_exists clamscan; then
            # Create temporary container
            docker create --name "$container_name" "$image" >/dev/null 2>&1 || {
                print_status "WARNING" "Could not create container for scanning: $image"
                continue
            }
            
            # Export container filesystem
            local export_file="$SCAN_RESULTS_DIR/${image_name}-filesystem.tar"
            docker export "$container_name" > "$export_file"
            
            # Clean up container
            docker rm "$container_name" >/dev/null 2>&1
            
            # Extract and scan
            local extract_dir="$SCAN_RESULTS_DIR/${image_name}-filesystem"
            mkdir -p "$extract_dir"
            tar -xf "$export_file" -C "$extract_dir" 2>/dev/null || {
                print_status "WARNING" "Could not extract container filesystem"
                continue
            }
            
            # Scan extracted filesystem
            clamscan \
                --recursive \
                --verbose \
                --log="$scan_log" \
                --infected \
                --remove=no \
                "$extract_dir" 2>&1 || {
                
                if grep -q "FOUND" "$scan_log"; then
                    print_status "ERROR" "Malware detected in image: $image"
                    grep "FOUND" "$scan_log"
                else
                    print_status "SUCCESS" "No malware detected in image: $image"
                fi
            }
            
            # Clean up temporary files
            rm -rf "$extract_dir" "$export_file"
        else
            print_status "WARNING" "ClamAV not available for image scanning"
        fi
    done
}

# Run YARA rules for advanced pattern detection
run_yara_scan() {
    print_status "INFO" "Running YARA pattern detection..."
    
    if ! command_exists yara; then
        print_status "WARNING" "YARA not installed, skipping advanced pattern detection"
        return 0
    fi
    
    # Create basic YARA rules for suspicious patterns
    local rules_file="$SCAN_RESULTS_DIR/suspicious-patterns.yar"
    cat > "$rules_file" << 'EOF'
rule SuspiciousBase64 {
    meta:
        description = "Detects suspicious base64 encoded content"
        severity = "medium"
    strings:
        $base64_1 = /[A-Za-z0-9+\/]{100,}/
        $eval = "eval("
        $exec = "exec("
    condition:
        $base64_1 and ($eval or $exec)
}

rule SuspiciousNetwork {
    meta:
        description = "Detects suspicious network activity patterns"
        severity = "high"
    strings:
        $wget = "wget"
        $curl = "curl"
        $suspicious_domain = /[a-z0-9\-]+\.(tk|ml|ga|cf)/ nocase
    condition:
        ($wget or $curl) and $suspicious_domain
}

rule HiddenFiles {
    meta:
        description = "Detects hidden executable files"
        severity = "medium"
    strings:
        $hidden = /\.[a-zA-Z0-9_\-]+\.sh/
        $hidden_py = /\.[a-zA-Z0-9_\-]+\.py/
    condition:
        $hidden or $hidden_py
}
EOF

    local yara_log="$SCAN_RESULTS_DIR/yara-scan.log"
    
    # Run YARA scan
    yara -r "$rules_file" . > "$yara_log" 2>&1 || {
        if [[ -s "$yara_log" ]]; then
            print_status "WARNING" "YARA detected suspicious patterns"
            cat "$yara_log"
        else
            print_status "SUCCESS" "No suspicious patterns detected by YARA"
        fi
    }
}

# Generate malware scan report
generate_malware_report() {
    print_status "INFO" "Generating malware scan report..."
    
    local report_file="$SCAN_RESULTS_DIR/malware-scan-report.md"
    
    cat > "$report_file" << EOF
# Malware Scan Report

**Generated**: $(date -u)  
**Repository**: alteriom-docker-images  
**Scan Type**: Comprehensive Malware Detection  

## Scan Summary

### Scans Performed

- [x] ClamAV source code scan
- [x] ClamAV Docker image scan
- [x] YARA pattern detection
- [x] Suspicious file analysis

### Results Overview

EOF

    # Check for any detected threats
    local threats_found=0
    
    # Check ClamAV logs
    for log_file in "$SCAN_RESULTS_DIR"/clamav-*.log; do
        if [[ -f "$log_file" ]] && grep -q "FOUND" "$log_file"; then
            threats_found=$((threats_found + 1))
        fi
    done
    
    # Check YARA results
    if [[ -f "$SCAN_RESULTS_DIR/yara-scan.log" ]] && [[ -s "$SCAN_RESULTS_DIR/yara-scan.log" ]]; then
        local yara_matches=$(wc -l < "$SCAN_RESULTS_DIR/yara-scan.log")
        threats_found=$((threats_found + yara_matches))
    fi
    
    cat >> "$report_file" << EOF
- **Total Threats Detected**: $threats_found
- **Quarantined Files**: $(ls -1 "$QUARANTINE_DIR/" 2>/dev/null | wc -l)
- **Scan Files Generated**: $(ls -1 "$SCAN_RESULTS_DIR"/*.log 2>/dev/null | wc -l)

### Threat Assessment

EOF

    if [[ $threats_found -eq 0 ]]; then
        echo "- ✅ No malware or suspicious patterns detected" >> "$report_file"
        echo "- ✅ Repository appears clean" >> "$report_file"
        echo "- 📋 Continue regular malware monitoring" >> "$report_file"
    else
        echo "- ⚠️ $threats_found potential threats detected" >> "$report_file"
        echo "- 🔧 Review detailed scan logs for analysis" >> "$report_file"
        echo "- 🚨 Investigate quarantined files immediately" >> "$report_file"
    fi
    
    cat >> "$report_file" << EOF

### Recommendations

1. Review all scan logs for detailed findings
2. Investigate any quarantined files
3. Update virus definitions regularly
4. Schedule regular malware scans (suggested: daily)
5. Monitor for new suspicious patterns

### Files Generated

$(ls -la "$SCAN_RESULTS_DIR"/ | grep -v "^total" | tail -n +2)

### Quarantined Files

$(ls -la "$QUARANTINE_DIR"/ 2>/dev/null | grep -v "^total" | tail -n +2 || echo "No files quarantined")

---
*Generated by malware-scanner.sh*
EOF

    print_status "SUCCESS" "Malware scan report generated: $report_file"
}

# Main execution
main() {
    echo -e "${BLUE}Starting malware scanning...${NC}"
    
    # Install tools if needed
    install_clamav
    
    # Perform scans
    scan_source_code
    scan_docker_images
    run_yara_scan
    
    # Generate report
    generate_malware_report
    
    echo ""
    echo -e "${GREEN}🎉 Malware scanning completed!${NC}"
    echo ""
    echo "📋 Results available in: $SCAN_RESULTS_DIR/"
    echo "📄 Main report: $SCAN_RESULTS_DIR/malware-scan-report.md"
    echo "🚨 Quarantine: $QUARANTINE_DIR/"
    echo ""
    
    # Check for threats
    local threat_count=0
    for log_file in "$SCAN_RESULTS_DIR"/clamav-*.log; do
        if [[ -f "$log_file" ]] && grep -q "FOUND" "$log_file"; then
            threat_count=$((threat_count + 1))
        fi
    done
    
    if [[ $threat_count -gt 0 ]]; then
        print_status "ERROR" "Malware threats detected - immediate action required"
        return 1
    else
        print_status "SUCCESS" "No malware threats detected"
        return 0
    fi
}

# Run main function
main "$@"