#!/bin/bash

# Simple Service Monitoring for ESP32/ESP8266 Docker Images
# Validates core service functionality with clean output

set -euo pipefail

# Configuration
DOCKER_REPOSITORY="${DOCKER_REPOSITORY:-ghcr.io/sparck75/alteriom-docker-images}"
RESULTS_DIR="${RESULTS_DIR:-service-monitoring-results}"

# Create results directory
mkdir -p "$RESULTS_DIR"

echo "Service Monitoring System"
echo "========================"
echo "Repository: $DOCKER_REPOSITORY"
echo "Started: $(date -u)"
echo ""

# Status tracking
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# Function to run check and track results
run_check() {
    local name="$1"
    local description="$2"
    shift 2
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    echo -n "[$TOTAL_CHECKS] $name: $description... "
    
    if "$@" >/dev/null 2>&1; then
        echo "✓ PASS"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
        return 0
    else
        echo "✗ FAIL"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
        return 1
    fi
}

# Check if image exists and is pullable
check_image_availability() {
    local image="$1"
    docker image inspect "$image" >/dev/null 2>&1 || docker pull "$image" >/dev/null 2>&1
}

# Check if PlatformIO version command works
check_platformio_version() {
    local image="$1"
    docker run --rm "$image" --version 2>&1 | grep -q "PlatformIO Core"
}

# Check basic container functionality
check_container_health() {
    local image="$1"
    docker run --rm "$image" --help >/dev/null 2>&1
}

# Check network connectivity
check_network_connectivity() {
    ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1
}

# Check PlatformIO registry connectivity
check_platformio_registry() {
    curl -s --max-time 10 https://api.registry.platformio.org/v3/libraries >/dev/null 2>&1
}

echo "## Service Category 1: Image Availability"
run_check "BUILDER_IMAGE" "Production builder image availability" check_image_availability "$DOCKER_REPOSITORY/builder:latest"
run_check "DEV_IMAGE" "Development image availability" check_image_availability "$DOCKER_REPOSITORY/dev:latest"

echo ""
echo "## Service Category 2: PlatformIO Functionality"
run_check "BUILDER_VERSION" "PlatformIO version in builder image" check_platformio_version "$DOCKER_REPOSITORY/builder:latest"
run_check "DEV_VERSION" "PlatformIO version in dev image" check_platformio_version "$DOCKER_REPOSITORY/dev:latest"

echo ""
echo "## Service Category 3: Container Health"
run_check "BUILDER_HEALTH" "Builder container health" check_container_health "$DOCKER_REPOSITORY/builder:latest"
run_check "DEV_HEALTH" "Development container health" check_container_health "$DOCKER_REPOSITORY/dev:latest"

echo ""
echo "## Service Category 4: Network Connectivity"
run_check "INTERNET" "Internet connectivity" check_network_connectivity
run_check "PLATFORMIO_API" "PlatformIO API connectivity" check_platformio_registry

echo ""
echo "## Service Monitoring Summary"
echo "============================="
echo "Total Checks: $TOTAL_CHECKS"
echo "Passed: $PASSED_CHECKS"
echo "Failed: $FAILED_CHECKS"

SUCCESS_RATE=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))
echo "Success Rate: ${SUCCESS_RATE}%"

# Generate summary report
cat > "$RESULTS_DIR/service-monitoring-summary.md" << EOF
# Service Monitoring Summary

**Execution Date:** $(date -u)
**Repository:** $DOCKER_REPOSITORY

## Results Overview

- **Total Checks:** $TOTAL_CHECKS
- **Passed:** $PASSED_CHECKS
- **Failed:** $FAILED_CHECKS
- **Success Rate:** ${SUCCESS_RATE}%

## Health Status

$(if [ $SUCCESS_RATE -ge 90 ]; then
    echo "**Overall Health:** EXCELLENT"
elif [ $SUCCESS_RATE -ge 75 ]; then
    echo "**Overall Health:** GOOD"
else
    echo "**Overall Health:** NEEDS_ATTENTION"
fi)

## Service Categories Status

1. **Image Availability:** $([ $PASSED_CHECKS -ge 2 ] && echo "✓ OPERATIONAL" || echo "✗ ISSUES")
2. **PlatformIO Service:** $([ $PASSED_CHECKS -ge 4 ] && echo "✓ OPERATIONAL" || echo "✗ ISSUES")
3. **Container Health:** $([ $PASSED_CHECKS -ge 6 ] && echo "✓ OPERATIONAL" || echo "✗ ISSUES")
4. **Network Connectivity:** $([ $PASSED_CHECKS -ge 8 ] && echo "✓ OPERATIONAL" || echo "✗ ISSUES")

---
*Generated by ESP32/ESP8266 Service Monitoring System*
EOF

echo ""
echo "Report saved to: $RESULTS_DIR/service-monitoring-summary.md"

# Exit with appropriate code
if [ $FAILED_CHECKS -eq 0 ]; then
    echo "✓ All service checks passed"
    exit 0
else
    echo "✗ Some service checks failed"
    exit 1
fi