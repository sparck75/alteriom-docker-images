---
# GitHub Copilot Setup Steps for Maximum Effectiveness
# Reference: GitHub Copilot best practices documentation

metadata:
  version: "1.0"
  created_for: "alteriom-docker-images"
  purpose: "Optimize GitHub Copilot setup for Docker/PlatformIO development"
  last_updated: "2024"

# Organization & Team Settings
organization_settings:
  copilot_access:
    - name: "Enable GitHub Copilot for Organization"
      action: "Navigate to Organization Settings > Copilot"
      settings:
        - enable_copilot_business: true
        - allow_suggestions_matching_public_code: "allow"  # or "block"
        - seat_assignment: "assign_to_all_members"  # or selective
      priority: "high"

  copilot_policies:
    - name: "Configure Copilot Content Exclusion"
      action: "Organization Settings > Copilot > Content exclusion"
      settings:
        - exclude_sensitive_paths:
            - "*/secrets/*"
            - "*/env/*"
            - "*.key"
            - "*.pem"
            - "*/credentials/*"
      priority: "critical"

    - name: "Set Copilot Usage Policies"
      action: "Organization Settings > Copilot > Policies"
      settings:
        - audit_logs_enabled: true
        - content_exclusion_enabled: true
        - suggestion_matching_control: "organization_level"
      priority: "high"

# Repository Settings
repository_settings:
  general:
    - name: "Repository Visibility"
      setting: "Private repositories get better Copilot suggestions"
      recommendation: "Keep repository private if possible for context"
      current_status: "check_current_visibility"

  branch_protection:
    - name: "Configure Branch Protection for main"
      action: "Settings > Branches > Add rule"
      settings:
        - require_pull_request_reviews: true
        - dismiss_stale_reviews: true
        - require_review_from_codeowners: true
        - restrict_pushes: true
        - allow_force_pushes: false
      benefit: "Enables better PR reviews and code improvements"

  collaborators:
    - name: "Set Up CODEOWNERS File"
      action: "Create .github/CODEOWNERS"
      content: |
        # Global owners for all files
        * @sparck75

        # Docker configurations
        */Dockerfile @sparck75
        production/ @sparck75
        development/ @sparck75

        # Scripts and automation
        scripts/ @sparck75
        .github/ @sparck75
      benefit: "Helps Copilot understand code ownership"

  repository_topics:
    - name: "Add Relevant Topics"
      action: "Repository Settings > Topics"
      recommended_topics:
        - "docker"
        - "platformio"
        - "esp32"
        - "esp8266"
        - "embedded"
        - "iot"
        - "alteriom"
        - "ci-cd"
      benefit: "Helps Copilot understand project context"

# Code Organization for Copilot
code_organization:
  file_structure:
    - name: "Maintain Clear Directory Structure"
      current_structure: |
        alteriom-docker-images/
        ├── production/Dockerfile
        ├── development/Dockerfile
        ├── scripts/
        ├── .github/workflows/
        └── docs/
      recommendations:
        - "Keep Dockerfiles in dedicated directories"
        - "Group related scripts together"
        - "Maintain consistent naming conventions"

  documentation:
    - name: "Comprehensive README.md"
      requirements:
        - clear_project_description: true
        - usage_examples: true
        - setup_instructions: true
        - api_documentation: true
      current_status: "✅ Already well-documented"

    - name: "Code Comments"
      best_practices:
        - "Add comments explaining complex Docker build steps"
        - "Document script parameters and return values"
        - "Explain platform-specific configurations"
        - "Include examples in comments"

  naming_conventions:
    - name: "Consistent Naming"
      patterns:
        - files: "kebab-case for scripts, PascalCase for Dockerfiles"
        - variables: "UPPER_CASE for environment variables"
        - functions: "snake_case for shell functions"
        - images: "lowercase with hyphens"

# IDE/Editor Configuration
ide_setup:
  vscode:
    - name: "Install GitHub Copilot Extension"
      extension_id: "GitHub.copilot"
      settings:
        - "github.copilot.enable": true
        - "github.copilot.autocomplete.enable": true
        - "github.copilot.suggestOnComment": true

    - name: "Install GitHub Copilot Chat Extension"
      extension_id: "GitHub.copilot-chat"
      benefits: "Enhanced AI assistance for code explanations"

    - name: "Recommended Additional Extensions"
      extensions:
        - "ms-vscode.docker": "Docker support"
        - "platformio.platformio-ide": "PlatformIO development"
        - "ms-vscode.yaml": "YAML language support"
        - "redhat.vscode-yaml": "YAML schema validation"

  workspace_settings:
    - name: "Configure VS Code Workspace"
      file: ".vscode/settings.json"
      content: |
        {
          "github.copilot.enable": {
            "*": true,
            "dockerfile": true,
            "yaml": true,
            "shell": true,
            "markdown": true
          },
          "files.associations": {
            "Dockerfile": "dockerfile",
            "*.yml": "yaml"
          }
        }

# Team Collaboration Settings
collaboration:
  pull_requests:
    - name: "PR Templates"
      action: "Create .github/pull_request_template.md"
      template: |
        ## Description
        Brief description of changes

        ## Type of Change
        - [ ] Bug fix
        - [ ] New feature
        - [ ] Documentation update
        - [ ] Docker configuration change

        ## Testing
        - [ ] Tested locally
        - [ ] CI/CD tests pass
        - [ ] Docker images build successfully

        ## Copilot Assistance
        - [ ] Used Copilot for code generation
        - [ ] Reviewed Copilot suggestions

  code_review:
    - name: "Review Guidelines"
      guidelines:
        - "Review Copilot-generated code carefully"
        - "Test Docker builds before approving"
        - "Verify security implications of suggestions"
        - "Check for proper error handling"

  issue_templates:
    - name: "Bug Report Template"
      action: "Create .github/ISSUE_TEMPLATE/bug_report.md"
      benefit: "Helps Copilot understand common issues and solutions"

# Security & Privacy Settings
security:
  sensitive_data:
    - name: "Configure .gitignore for Secrets"
      additions:
        - "*.env"
        - "*.key"
        - "*.pem"
        - "secrets/"
        - ".env.*"
        - "credentials/"

  copilot_data_handling:
    - name: "Review Data Sharing Settings"
      action: "User Settings > Copilot > Data sharing"
      recommendations:
        - review_code_suggestions: true
        - understand_data_usage: true
        - configure_exclusions: true

  secrets_management:
    - name: "Repository Secrets"
      action: "Settings > Secrets and variables > Actions"
      current_secrets:
        - "GITHUB_TOKEN (automatic)"
      recommendations:
        - "Use repository secrets for sensitive data"
        - "Never hardcode credentials in Dockerfiles"
        - "Use environment variables for configuration"

# Copilot Optimization for This Project
project_specific:
  docker_development:
    - name: "Docker-specific Copilot Tips"
      tips:
        - "Use descriptive comments in Dockerfiles for better suggestions"
        - "Include platform information in comments"
        - "Document build arguments and their purposes"
        - "Explain multi-stage build reasoning"

  platformio_context:
    - name: "PlatformIO Context for Copilot"
      context_files:
        - "Include platformio.ini examples in comments"
        - "Document ESP32/ESP8266 specific configurations"
        - "Explain library dependencies and versions"

  ci_cd_optimization:
    - name: "GitHub Actions Context"
      current_workflows:
        - "build-and-publish.yml"
        - "publish-mydocker.yml"
      recommendations:
        - "Add comments explaining workflow steps"
        - "Document environment variables usage"
        - "Include error handling examples"

# Verification Steps
verification:
  copilot_functionality:
    - name: "Test Copilot Suggestions"
      steps:
        - "Open a Dockerfile and start typing comments"
        - "Verify suggestions appear for Docker commands"
        - "Test code completion in shell scripts"
        - "Check suggestions in YAML files"

  team_access:
    - name: "Verify Team Member Access"
      checklist:
        - "All team members have Copilot licenses"
        - "Repository access is properly configured"
        - "Branch protection rules are working"
        - "PR templates are being used"

  security_validation:
    - name: "Security Check"
      validation:
        - "No secrets in repository history"
        - "Sensitive paths are excluded"
        - "Content exclusion rules are active"
        - ".gitignore includes security patterns"

# Maintenance & Monitoring
maintenance:
  regular_reviews:
    - name: "Monthly Copilot Review"
      schedule: "First Monday of each month"
      checklist:
        - "Review Copilot usage statistics"
        - "Update content exclusion rules if needed"
        - "Check for new Copilot features"
        - "Gather team feedback on effectiveness"

  updates:
    - name: "Keep Configuration Updated"
      actions:
        - "Monitor GitHub Copilot feature releases"
        - "Update IDE extensions regularly"
        - "Review and update exclusion patterns"
        - "Refresh team training on best practices"

# Troubleshooting
troubleshooting:
  common_issues:
    - issue: "Copilot suggestions not appearing"
      solutions:
        - "Check IDE extension is enabled and updated"
        - "Verify GitHub authentication"
        - "Check repository access permissions"
        - "Review content exclusion settings"

    - issue: "Poor quality suggestions"
      solutions:
        - "Add more descriptive comments"
        - "Improve file organization"
        - "Include more context in documentation"
        - "Use consistent naming conventions"

    - issue: "Security concerns with suggestions"
      solutions:
        - "Review and strengthen content exclusion rules"
        - "Educate team on reviewing AI-generated code"
        - "Implement additional code review processes"
        - "Regular security audits of suggested code"

# Success Metrics
success_metrics:
  effectiveness_indicators:
    - "Faster Docker configuration development"
    - "Reduced time for script writing"
    - "Improved code consistency across team"
    - "Better documentation through AI assistance"
    - "Faster onboarding of new team members"

  measurement_methods:
    - "Track PR review time reduction"
    - "Monitor code quality metrics"
    - "Survey team satisfaction with Copilot"
    - "Measure feature development velocity"

# Quick Reference
quick_reference:
  essential_settings:
    organization:
      - "Enable Copilot Business"
      - "Configure content exclusions"
      - "Set up audit logging"
    repository:
      - "Add relevant topics"
      - "Create CODEOWNERS file"
      - "Set up branch protection"
    ide:
      - "Install Copilot extensions"
      - "Configure file associations"
      - "Enable all language support"

  first_time_setup_checklist:
    - "✅ Organization Copilot enabled"
    - "✅ Repository topics added"
    - "✅ CODEOWNERS file created"
    - "✅ IDE extensions installed"
    - "✅ Content exclusions configured"
    - "✅ Team members have access"
    - "✅ Security settings reviewed"
    - "✅ PR templates created"
