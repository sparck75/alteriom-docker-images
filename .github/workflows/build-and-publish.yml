name: Build and Publish Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run daily at 02:00 UTC as mentioned in README
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering

env:
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Trivy filesystem vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true
      
      - name: Upload Trivy filesystem scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'
      
      - name: Run Trivy configuration scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy configuration scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-config-results.sarif'
          category: 'trivy-configuration'
      
      - name: Run production Dockerfile security scan
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: production/Dockerfile
          format: sarif
          output-file: hadolint-production.sarif
          no-fail: true
      
      - name: Run development Dockerfile security scan
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: development/Dockerfile
          format: sarif
          output-file: hadolint-development.sarif
          no-fail: true
      
      - name: Upload production Dockerfile scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-production.sarif
          category: 'hadolint-production'
      
      - name: Upload development Dockerfile scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-development.sarif
          category: 'hadolint-development'
      
      - name: Python dependency security scan
        run: |
          echo "🔍 Scanning Python dependencies for security vulnerabilities..."
          python -m pip install --upgrade pip safety
          
          # Create requirements files from Dockerfiles with security fixes
          echo "platformio==6.1.13" > requirements-prod.txt
          echo "setuptools>=70.0.0" >> requirements-prod.txt
          echo "starlette>=0.40.0" >> requirements-prod.txt
          
          echo "platformio==6.1.13" > requirements-dev.txt
          echo "setuptools>=70.0.0" >> requirements-dev.txt
          echo "starlette>=0.40.0" >> requirements-dev.txt
          echo "twine" >> requirements-dev.txt
          
          # Scan dependencies for known vulnerabilities using modern Safety CLI
          echo "📋 Production dependencies scan:"
          safety scan --output json --save-as json safety-prod.json --target requirements-prod.txt || true
          
          echo "📋 Development dependencies scan:"
          safety scan --output json --save-as json safety-dev.json --target requirements-dev.txt || true
          
          # Display results
          echo "Production security scan results:"
          safety scan --target requirements-prod.txt || echo "Security issues found in production dependencies"
          
          echo "Development security scan results:"
          safety scan --target requirements-dev.txt || echo "Security issues found in development dependencies"
      
      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-security-scan
          path: |
            safety-*.json
            requirements-*.txt
          retention-days: 30

  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          # Use GitHub Container Registry (GHCR) with GitHub token for seamless authentication
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set Docker Repository
        id: repo
        run: |
          if [ -n "${{ vars.DOCKER_REPOSITORY }}" ]; then
            echo "DOCKER_REPOSITORY=${{ vars.DOCKER_REPOSITORY }}" >> $GITHUB_ENV
          elif [ -n "${{ secrets.DOCKER_REPOSITORY }}" ]; then
            echo "DOCKER_REPOSITORY=${{ secrets.DOCKER_REPOSITORY }}" >> $GITHUB_ENV
          else
            echo "DOCKER_REPOSITORY=ghcr.io/${{ github.repository_owner }}/alteriom-docker-images" >> $GITHUB_ENV
          fi
          echo "Using DOCKER_REPOSITORY: $DOCKER_REPOSITORY"
      
      - name: Bump Version
        id: bump_version
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Get current version
          if [ -f "VERSION" ]; then
            CURRENT_VERSION=$(cat VERSION | tr -d '\n\r')
          else
            CURRENT_VERSION="1.0.0"
          fi
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Check commit messages for version bump indicators
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if echo "$COMMIT_MSG" | grep -qE "^(BREAKING CHANGE|feat!|fix!|perf!):"; then
            # Major version bump for breaking changes
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            echo "🚨 MAJOR version bump due to breaking change"
          elif echo "$COMMIT_MSG" | grep -qE "^(feat|feature):"; then
            # Minor version bump for new features
            MINOR=$((MINOR + 1))
            PATCH=0
            echo "✨ MINOR version bump due to new feature"
          elif echo "$COMMIT_MSG" | grep -qE "^(fix|bug|patch|hotfix):"; then
            # Patch version bump for bug fixes
            PATCH=$((PATCH + 1))
            echo "🐛 PATCH version bump due to bug fix"
          elif echo "$COMMIT_MSG" | grep -qE "Merge pull request"; then
            # Default patch bump for merged PRs
            PATCH=$((PATCH + 1))
            echo "🔀 PATCH version bump due to PR merge"
          else
            echo "ℹ️ No version bump - using current version"
          fi
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          
          # Only update if version changed
          if [ "$NEW_VERSION" != "$CURRENT_VERSION" ]; then
            echo "$NEW_VERSION" > VERSION
            echo "📈 Version bumped from $CURRENT_VERSION to $NEW_VERSION"
            
            # Configure git for the bot
            git config --global user.name "github-actions[bot]"
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            
            # Commit version bump
            git add VERSION
            git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
            git push
            
            echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
          fi
          
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Read Version  
        id: version
        if: github.ref != 'refs/heads/main' || github.event_name != 'push'
        run: |
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION | tr -d '\n\r')
          else
            VERSION="1.0.0"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using VERSION: $VERSION"
      
      - name: Detect Changed Files
        id: changes
        if: github.event_name == 'push'
        run: |
          # Get list of changed files in the push
          echo "Detecting changed files..."
          
          # For pushes, compare with previous commit
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || git diff --name-only HEAD^ HEAD 2>/dev/null || echo "")
          else
            # For PR builds, get all changed files
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD 2>/dev/null || echo "")
          fi
          
          echo "Changed files: $CHANGED_FILES"
          
          # Check if only documentation or non-critical files were changed
          DOCS_ONLY="true"
          BUILD_RELATED="false"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changed files detected, proceeding with build"
            DOCS_ONLY="false"
          else
            for file in $CHANGED_FILES; do
              echo "Checking file: $file"
              case "$file" in
                *.md|*.txt|LICENSE|*.rst|docs/*|.gitignore|.github/ISSUE_TEMPLATE/*|.github/PULL_REQUEST_TEMPLATE/*)
                  echo "  → Documentation/non-critical file"
                  ;;
                production/*|development/*|scripts/*|.github/workflows/*|VERSION|BUILD_NUMBER)
                  echo "  → Build-related file"
                  BUILD_RELATED="true"
                  DOCS_ONLY="false"
                  ;;
                *)
                  echo "  → Other file, considering as build-related"
                  DOCS_ONLY="false"
                  ;;
              esac
            done
          fi
          
          echo "docs_only=$DOCS_ONLY" >> $GITHUB_OUTPUT
          echo "build_related=$BUILD_RELATED" >> $GITHUB_OUTPUT
          
          if [ "$DOCS_ONLY" = "true" ]; then
            echo "🚀 Only documentation files changed - build can be skipped"
          elif [ "$BUILD_RELATED" = "true" ]; then
            echo "🔧 Build-related files changed - build required"
          else
            echo "📋 Mixed changes detected - build required"
          fi

      - name: Package Audit for Daily Builds
        id: audit
        if: github.event_name == 'schedule'
        env:
          DOCKER_REPOSITORY: ${{ env.DOCKER_REPOSITORY }}
        run: |
          chmod +x scripts/audit-packages.sh
          echo "🔍 Running daily package audit..."
          
          # Run audit and capture result
          if ./scripts/audit-packages.sh; then
            echo "audit_result=build_recommended" >> $GITHUB_OUTPUT
            echo "build_needed=true" >> $GITHUB_OUTPUT
          else
            echo "audit_result=build_skipped" >> $GITHUB_OUTPUT
            echo "build_needed=false" >> $GITHUB_OUTPUT
          fi
          
          # Extract audit information for later steps
          if [ -f "audit-report.md" ]; then
            # Extract change summary from audit report
            CHANGE_SUMMARY=$(grep "^**Change Summary:**" audit-report.md | cut -d' ' -f3- || echo "No changes detected")
            echo "change_summary=$CHANGE_SUMMARY" >> $GITHUB_OUTPUT
            
            # Save audit report as artifact
            echo "📋 Audit report generated - will be saved as artifact"
          fi

      - name: Build and Push Images
        if: |
          (github.event_name == 'schedule' && steps.audit.outputs.build_needed == 'true') ||
          (github.event_name == 'push' && steps.changes.outputs.docs_only != 'true') ||
          (github.event_name != 'schedule' && github.event_name != 'push')
        env:
          DOCKER_REPOSITORY: ${{ env.DOCKER_REPOSITORY }}
          PLATFORMS: ${{ env.PLATFORMS }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          AUDIT_RESULT: ${{ steps.audit.outputs.audit_result }}
          AUDIT_CHANGES: ${{ steps.audit.outputs.change_summary }}
        run: |
          chmod +x scripts/build-images.sh
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # Daily builds: only build and push development image (after audit approval)
            echo "🌅 Daily build: Building development image only"
            echo "📋 Audit result: ${AUDIT_RESULT}"
            echo "📋 Changes detected: ${AUDIT_CHANGES}"
            ./scripts/build-images.sh dev-only
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # PR merges and manual triggers: build both images
            echo "🚀 Production build: Building both images"
            ./scripts/build-images.sh push
          else
            # PR branches: build locally only
            echo "🔧 PR build: Building locally"
            ./scripts/build-images.sh
          fi

      - name: Skip Build (Documentation Only)
        if: github.event_name == 'push' && steps.changes.outputs.docs_only == 'true'
        run: |
          echo "📚 Build skipped - only documentation files were changed"
          echo "📋 This saves CI/CD resources while maintaining code quality"
          echo "📋 Changed files contain only: documentation, README, license, or similar non-build files"

      - name: Skip Daily Build
        if: github.event_name == 'schedule' && steps.audit.outputs.build_needed == 'false'
        run: |
          echo "⏭️ Daily build skipped - no changes detected"
          echo "📋 Audit result: ${{ steps.audit.outputs.audit_result }}"
          echo "📋 Reason: ${{ steps.audit.outputs.change_summary }}"
      
      - name: Update Development Badge
        if: |
          github.ref == 'refs/heads/main' && 
          ((github.event_name == 'push' && steps.changes.outputs.docs_only != 'true') ||
           (github.event_name == 'schedule' && steps.audit.outputs.build_needed == 'true'))
        run: |
          # Read current build number
          if [ -f "BUILD_NUMBER" ]; then
            BUILD_NUMBER=$(cat BUILD_NUMBER | tr -d '\n\r')
          else
            BUILD_NUMBER=1
          fi
          
          # Increment build number for any development build
          NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
          echo "$NEW_BUILD_NUMBER" > BUILD_NUMBER
          
          if [ "${{ github.event_name }}" = "schedule" ] && [ "${{ steps.audit.outputs.build_needed }}" = "true" ]; then
            # Daily build executed - update with dev version and build number
            DEV_VERSION="${{ env.VERSION }}-dev-build.${NEW_BUILD_NUMBER}"
            BADGE_TEXT="Development-${{ env.VERSION }}%2B%20(build%20${NEW_BUILD_NUMBER})-orange"
            echo "Updating development badge with version: ${{ env.VERSION }}+ (build ${NEW_BUILD_NUMBER})"
          elif [ "${{ github.event_name }}" = "push" ]; then
            # Production build - development badge shows next development version with + notation
            BADGE_TEXT="Development-${{ env.VERSION }}%2B%20(build%20${NEW_BUILD_NUMBER})-orange"
            echo "Updating development badge for production build: ${{ env.VERSION }}+ (build ${NEW_BUILD_NUMBER})"
          else
            # No build executed or not applicable
            echo "No development badge update needed"
            exit 0
          fi
          
          # Update README.md with new badge
          sed -i "s|Development-.*-orange|${BADGE_TEXT}|g" README.md
          
          # Check if changes were made
          if git diff --quiet README.md BUILD_NUMBER; then
            echo "No changes to README badge or build number needed"
          else
            echo "README badge and build number updated successfully"
            
            # Configure git for the bot
            git config --global user.name "github-actions[bot]"
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            
            # Commit and push changes
            git add README.md BUILD_NUMBER
            git commit -m "chore: update development badge to build ${NEW_BUILD_NUMBER} [skip ci]"
            git push
          fi

      - name: Test ESP Platform Builds
        if: |
          (github.event_name == 'schedule' && steps.audit.outputs.build_needed == 'true') ||
          (github.event_name == 'push' && steps.changes.outputs.docs_only != 'true') ||
          (github.event_name != 'schedule' && github.event_name != 'push')
        env:
          DOCKER_REPOSITORY: ${{ env.DOCKER_REPOSITORY }}
        run: |
          chmod +x scripts/test-esp-builds.sh
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # Daily builds: only test development image
            echo "🌅 Daily build: Testing development image only"
            ./scripts/test-esp-builds.sh "${DOCKER_REPOSITORY}/dev:latest"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # On main branch, images are pushed with :latest tag
            ./scripts/test-esp-builds.sh
          else
            # On PR branches, images are built locally with :local tag
            ./scripts/test-esp-builds.sh "${DOCKER_REPOSITORY}/builder:local" "${DOCKER_REPOSITORY}/dev:local"
          fi
      
      - name: Container Image Security Scan
        if: |
          (github.event_name == 'schedule' && steps.audit.outputs.build_needed == 'true') ||
          (github.event_name == 'push' && steps.changes.outputs.docs_only != 'true') ||
          (github.event_name != 'schedule' && github.event_name != 'push')
        env:
          DOCKER_REPOSITORY: ${{ env.DOCKER_REPOSITORY }}
        run: |
          echo "🔍 Running container image security scans..."
          
          # Determine which images to scan based on build event
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # Daily builds: only scan development image
            IMAGES=("${DOCKER_REPOSITORY}/dev:latest")
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Production builds: scan both images
            IMAGES=("${DOCKER_REPOSITORY}/builder:latest" "${DOCKER_REPOSITORY}/dev:latest")
          else
            # PR builds: scan local images
            IMAGES=("${DOCKER_REPOSITORY}/builder:local" "${DOCKER_REPOSITORY}/dev:local")
          fi
          
          # Install Trivy for container scanning
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          
          mkdir -p security-scan-results
          
          # Scan each image
          for image in "${IMAGES[@]}"; do
            echo "🔍 Scanning image: $image"
            
            # Extract image name for file naming
            image_name=$(echo "$image" | sed 's|.*/||' | sed 's|:|_|g')
            
            # Pull image before scanning (for published images)
            if [[ "$image" == *":latest" ]]; then
              echo "📥 Pulling image: $image"
              docker pull "$image" || echo "Warning: Could not pull $image, scanning anyway"
            fi
            
            # Vulnerability scan
            echo "🛡️ Running vulnerability scan on $image..."
            trivy image --format json --output "security-scan-results/trivy-${image_name}-vuln.json" "$image" || true
            trivy image --format table "$image" > "security-scan-results/trivy-${image_name}-report.txt" || true
            
            # Configuration scan  
            echo "⚙️ Running configuration scan on $image..."
            trivy image --scanners config --format json --output "security-scan-results/trivy-${image_name}-config.json" "$image" || true
            
            # Count HIGH and CRITICAL vulnerabilities
            high_count=$(jq '[.Results[]? | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "HIGH")]' "security-scan-results/trivy-${image_name}-vuln.json" | jq length 2>/dev/null || echo "0")
            critical_count=$(jq '[.Results[]? | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "CRITICAL")]' "security-scan-results/trivy-${image_name}-vuln.json" | jq length 2>/dev/null || echo "0")
            
            echo "📊 $image: Found $critical_count CRITICAL and $high_count HIGH vulnerabilities"
            
            # Check if vulnerabilities were reduced compared to baseline
            if [ "$high_count" -gt 0 ] || [ "$critical_count" -gt 0 ]; then
              echo "⚠️ Security vulnerabilities detected in $image"
              echo "🔧 Review security-scan-results/trivy-${image_name}-report.txt for details"
            else
              echo "✅ No HIGH or CRITICAL vulnerabilities found in $image"
            fi
          done
          
          # Generate security summary
          echo "📋 Security Scan Summary" > security-scan-results/scan-summary.md
          echo "=========================" >> security-scan-results/scan-summary.md
          echo "Timestamp: $(date -u)" >> security-scan-results/scan-summary.md
          echo "Event: ${{ github.event_name }}" >> security-scan-results/scan-summary.md
          echo "Images scanned: ${#IMAGES[@]}" >> security-scan-results/scan-summary.md
          echo "" >> security-scan-results/scan-summary.md
          
          for image in "${IMAGES[@]}"; do
            image_name=$(echo "$image" | sed 's|.*/||' | sed 's|:|_|g')
            if [ -f "security-scan-results/trivy-${image_name}-vuln.json" ]; then
              high_count=$(jq '[.Results[]? | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "HIGH")]' "security-scan-results/trivy-${image_name}-vuln.json" | jq length 2>/dev/null || echo "0")
              critical_count=$(jq '[.Results[]? | select(.Vulnerabilities) | .Vulnerabilities[] | select(.Severity == "CRITICAL")]' "security-scan-results/trivy-${image_name}-vuln.json" | jq length 2>/dev/null || echo "0")
              echo "- $image: $critical_count CRITICAL, $high_count HIGH" >> security-scan-results/scan-summary.md
            fi
          done
          
          echo "" >> security-scan-results/scan-summary.md
          echo "🛡️ Security fixes implemented:" >> security-scan-results/scan-summary.md
          echo "- HEALTHCHECK instructions added" >> security-scan-results/scan-summary.md
          echo "- setuptools updated to >=70.0.0" >> security-scan-results/scan-summary.md
          echo "- starlette updated to >=0.40.0" >> security-scan-results/scan-summary.md
          
          echo "✅ Container image security scanning completed"
          
          echo "✅ Container image security scanning completed"
            
            echo "📋 Security scan completed for $image"
          done
          
          # Generate summary
          echo "## Container Security Scan Summary 🔒" > container-scan-results/summary.md
          echo "" >> container-scan-results/summary.md
          echo "Scanned images:" >> container-scan-results/summary.md
          for image in $IMAGES_TO_SCAN; do
            echo "- \`$image\`" >> container-scan-results/summary.md
          done
          echo "" >> container-scan-results/summary.md
          echo "Generated: $(date -u)" >> container-scan-results/summary.md
          
          # Display summary
          cat container-scan-results/summary.md
      
      - name: Upload Container Security Scan Results
        if: |
          always() &&
          ((github.event_name == 'schedule' && steps.audit.outputs.build_needed == 'true') ||
           (github.event_name == 'push' && steps.changes.outputs.docs_only != 'true') ||
           (github.event_name != 'schedule' && github.event_name != 'push'))
        uses: actions/upload-artifact@v4
        with:
          name: container-security-scan-results
          path: container-scan-results/
          retention-days: 30
      
      - name: Generate Release Notes
        id: release_notes
        if: |
          github.ref == 'refs/heads/main' && 
          github.event_name != 'schedule' &&
          (github.event_name != 'push' || steps.changes.outputs.docs_only != 'true')
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # If no previous tags, get all commits from beginning
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            # Get commits since last tag
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## Docker Images v${{ env.VERSION }}
          
          This release contains the following Docker images:
          
          ### Production Builder
          - \`${{ env.DOCKER_REPOSITORY }}/builder:latest\`
          - \`${{ env.DOCKER_REPOSITORY }}/builder:${{ env.VERSION }}\`
          
          ### Development Builder  
          - \`${{ env.DOCKER_REPOSITORY }}/dev:latest\`
          - \`${{ env.DOCKER_REPOSITORY }}/dev:${{ env.VERSION }}\`
          
          ### Changes in this release
          $COMMITS
          
          ### Testing
          All images have been validated with ESP32, ESP32-S3, ESP32-C3, and ESP8266 test builds.
          
          ### Usage
          \`\`\`bash
          docker pull ${{ env.DOCKER_REPOSITORY }}/builder:${{ env.VERSION }}
          docker run --rm -v \${PWD}:/workspace ${{ env.DOCKER_REPOSITORY }}/builder:${{ env.VERSION }} pio run -e esp32dev
          \`\`\`
          
          Built on: $(date -u +%Y-%m-%d)
          EOF
          
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: |
          github.ref == 'refs/heads/main' && 
          github.event_name != 'schedule' &&
          (github.event_name != 'push' || steps.changes.outputs.docs_only != 'true')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
      
      - name: Upload Audit Report
        if: github.event_name == 'schedule'
        uses: actions/upload-artifact@v4
        with:
          name: daily-audit-report
          path: audit-report.md
          retention-days: 30

      - name: Image Summary
        run: |
          echo "## Published Images 🐋" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          DATE_TAG=$(date -u +%Y%m%d)
          
          # Read build number for summary display
          if [ -f "BUILD_NUMBER" ]; then
            CURRENT_BUILD_NUMBER=$(cat BUILD_NUMBER | tr -d '\n\r')
          else
            CURRENT_BUILD_NUMBER=1
          fi
          
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # Daily build summary
            if [ "${{ steps.audit.outputs.build_needed }}" = "true" ]; then
              # Build was executed
              DEV_VERSION="${VERSION}-dev-build.${CURRENT_BUILD_NUMBER}"
              echo "**Daily Build:** Development image updated based on audit" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🔍 Package Audit Results" >> $GITHUB_STEP_SUMMARY
              echo "- **Status:** Build recommended" >> $GITHUB_STEP_SUMMARY
              echo "- **Changes:** ${{ steps.audit.outputs.change_summary }}" >> $GITHUB_STEP_SUMMARY
              echo "- **Audit Report:** Available in artifacts" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Development Builder (Updated)" >> $GITHUB_STEP_SUMMARY
              echo "- \`${DOCKER_REPOSITORY}/dev:latest\`" >> $GITHUB_STEP_SUMMARY
              echo "- \`${DOCKER_REPOSITORY}/dev:${DEV_VERSION}\`" >> $GITHUB_STEP_SUMMARY
              echo "- \`${DOCKER_REPOSITORY}/dev:build.${CURRENT_BUILD_NUMBER}\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Production Builder (Not Updated)" >> $GITHUB_STEP_SUMMARY
              echo "- \`${DOCKER_REPOSITORY}/builder:latest\` (unchanged)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Build Information" >> $GITHUB_STEP_SUMMARY
              echo "- **Build Type:** Daily development build (audit-driven)" >> $GITHUB_STEP_SUMMARY
              echo "- **Dev Version:** \`${DEV_VERSION}\`" >> $GITHUB_STEP_SUMMARY
              echo "- **Production Version:** \`${VERSION}\` (unchanged)" >> $GITHUB_STEP_SUMMARY
              echo "- **Build Number:** \`${CURRENT_BUILD_NUMBER}\`" >> $GITHUB_STEP_SUMMARY
              echo "- **Trigger:** Package audit detected changes" >> $GITHUB_STEP_SUMMARY
            else
              # Build was skipped
              echo "**Daily Build:** Skipped based on audit results" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🔍 Package Audit Results" >> $GITHUB_STEP_SUMMARY
              echo "- **Status:** No build needed" >> $GITHUB_STEP_SUMMARY
              echo "- **Reason:** ${{ steps.audit.outputs.change_summary }}" >> $GITHUB_STEP_SUMMARY
              echo "- **Audit Report:** Available in artifacts" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Current Images (No Changes)" >> $GITHUB_STEP_SUMMARY
              echo "- \`${DOCKER_REPOSITORY}/dev:latest\` (unchanged)" >> $GITHUB_STEP_SUMMARY
              echo "- \`${DOCKER_REPOSITORY}/builder:latest\` (unchanged)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Build Information" >> $GITHUB_STEP_SUMMARY
              echo "- **Build Type:** Daily audit (no build executed)" >> $GITHUB_STEP_SUMMARY
              echo "- **Current Version:** \`${VERSION}\`" >> $GITHUB_STEP_SUMMARY
              echo "- **Date:** \`${DATE_TAG}\`" >> $GITHUB_STEP_SUMMARY
              echo "- **Next Audit:** Tomorrow at 02:00 UTC" >> $GITHUB_STEP_SUMMARY
            fi
          else
            # Production build summary
            echo "**Production Build:** Both images updated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Production Builder" >> $GITHUB_STEP_SUMMARY
            echo "- \`${DOCKER_REPOSITORY}/builder:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${DOCKER_REPOSITORY}/builder:${VERSION}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${DOCKER_REPOSITORY}/builder:${DATE_TAG}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Development Builder" >> $GITHUB_STEP_SUMMARY
            echo "- \`${DOCKER_REPOSITORY}/dev:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${DOCKER_REPOSITORY}/dev:${VERSION}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${DOCKER_REPOSITORY}/dev:${DATE_TAG}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Version Information" >> $GITHUB_STEP_SUMMARY
            echo "- **Version:** \`${VERSION}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Date:** \`${DATE_TAG}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **GitHub Release:** Created for v${VERSION}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage Example" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "# Use development image (updated when changes detected)" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${DOCKER_REPOSITORY}/dev:latest" >> $GITHUB_STEP_SUMMARY
            echo "docker run --rm -v \${PWD}:/workspace ${DOCKER_REPOSITORY}/dev:latest pio run -e diag-esp32-c3" >> $GITHUB_STEP_SUMMARY
          else
            echo "# Use production image (stable)" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${DOCKER_REPOSITORY}/builder:${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "docker run --rm -v \${PWD}:/workspace ${DOCKER_REPOSITORY}/builder:${VERSION} pio run -e diag-esp32-c3" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload Security Scan Results
        if: |
          always() &&
          ((github.event_name == 'schedule' && steps.audit.outputs.build_needed == 'true') ||
           (github.event_name == 'push' && steps.changes.outputs.docs_only != 'true') ||
           (github.event_name != 'schedule' && github.event_name != 'push'))
        uses: actions/upload-artifact@v4
        with:
          name: container-security-scan-${{ github.run_number }}
          path: |
            security-scan-results/
          retention-days: 30