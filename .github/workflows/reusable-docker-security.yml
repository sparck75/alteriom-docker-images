# Reusable Docker Security Workflow
# Specialized workflow for Docker image security scanning
# Usage in other repositories:
# 
# name: Docker Security Checks
# on: [push, pull_request]
# jobs:
#   docker-security:
#     uses: sparck75/alteriom-docker-images/.github/workflows/reusable-docker-security.yml@main
#     with:
#       image-name: "my-app"
#       dockerfile-path: "./Dockerfile"
#     secrets: inherit

name: Reusable Docker Security Checks

on:
  workflow_call:
    inputs:
      image-name:
        description: 'Docker image name for scanning'
        required: true
        type: string
      dockerfile-path:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: './Dockerfile'
      registry:
        description: 'Container registry'
        required: false
        type: string
        default: 'ghcr.io'
      enable-trivy-scan:
        description: 'Enable Trivy vulnerability scanning'
        required: false
        type: boolean
        default: true
      enable-hadolint:
        description: 'Enable Dockerfile linting with Hadolint'
        required: false
        type: boolean
        default: true
      enable-dockle:
        description: 'Enable Dockle container image linting'
        required: false
        type: boolean
        default: true

jobs:
  docker-security:
    runs-on: ubuntu-latest
    name: Docker Security Analysis
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        run: |
          docker build -t ${{ inputs.image-name }}:security-scan -f ${{ inputs.dockerfile-path }} .

      - name: Run Trivy vulnerability scanner
        if: inputs.enable-trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ inputs.image-name }}:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: inputs.enable-trivy-scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for JSON report
        if: inputs.enable-trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ inputs.image-name }}:security-scan'
          format: 'json'
          output: 'trivy-report.json'

      - name: Install Hadolint
        if: inputs.enable-hadolint
        run: |
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/

      - name: Run Hadolint Dockerfile linter
        if: inputs.enable-hadolint
        run: |
          hadolint ${{ inputs.dockerfile-path }} --format json > hadolint-report.json || true

      - name: Install Dockle
        if: inputs.enable-dockle
        run: |
          VERSION=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          curl -L -o dockle.deb "https://github.com/goodwithtech/dockle/releases/latest/download/dockle_${VERSION}_Linux-64bit.deb"
          sudo dpkg -i dockle.deb

      - name: Run Dockle container image linter
        if: inputs.enable-dockle
        run: |
          dockle --format json --output dockle-report.json ${{ inputs.image-name }}:security-scan || true

      - name: Generate security summary
        run: |
          echo "## 🐳 Docker Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ inputs.image-name }}:security-scan\`" >> $GITHUB_STEP_SUMMARY
          echo "**Dockerfile:** \`${{ inputs.dockerfile-path }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "trivy-report.json" ]; then
            echo "### 🔍 Trivy Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
            CRITICAL=$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            HIGH=$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            MEDIUM=$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            echo "- **Critical:** $CRITICAL vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "- **High:** $HIGH vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "- **Medium:** $MEDIUM vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "hadolint-report.json" ]; then
            echo "### 📋 Hadolint Dockerfile Analysis" >> $GITHUB_STEP_SUMMARY
            ERRORS=$(jq -r '. | length' hadolint-report.json 2>/dev/null || echo "0")
            echo "- **Issues found:** $ERRORS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "dockle-report.json" ]; then
            echo "### 🏗️ Dockle Container Image Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- **Analysis completed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-security-reports
          path: |
            trivy-results.sarif
            trivy-report.json
            hadolint-report.json
            dockle-report.json
          retention-days: 30

      - name: Comment on PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🐳 Docker Security Scan Results\n\n';
            comment += `**Image:** \`${{ inputs.image-name }}:security-scan\`\n`;
            comment += `**Dockerfile:** \`${{ inputs.dockerfile-path }}\`\n\n`;
            
            if (fs.existsSync('trivy-report.json')) {
              try {
                const trivyReport = JSON.parse(fs.readFileSync('trivy-report.json', 'utf8'));
                const vulns = trivyReport.Results?.flatMap(r => r.Vulnerabilities || []) || [];
                const critical = vulns.filter(v => v.Severity === 'CRITICAL').length;
                const high = vulns.filter(v => v.Severity === 'HIGH').length;
                const medium = vulns.filter(v => v.Severity === 'MEDIUM').length;
                
                comment += '### 🔍 Trivy Vulnerability Scan\n';
                comment += `- **Critical:** ${critical} vulnerabilities\n`;
                comment += `- **High:** ${high} vulnerabilities\n`;
                comment += `- **Medium:** ${medium} vulnerabilities\n\n`;
              } catch (e) {
                comment += '### 🔍 Trivy Vulnerability Scan\n- Analysis completed (results in artifacts)\n\n';
              }
            }
            
            if (fs.existsSync('hadolint-report.json')) {
              try {
                const hadolintReport = JSON.parse(fs.readFileSync('hadolint-report.json', 'utf8'));
                comment += `### 📋 Hadolint Dockerfile Analysis\n- **Issues found:** ${hadolintReport.length}\n\n`;
              } catch (e) {
                comment += '### 📋 Hadolint Dockerfile Analysis\n- Analysis completed (results in artifacts)\n\n';
              }
            }
            
            comment += '📊 Detailed reports are available in the workflow artifacts.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });