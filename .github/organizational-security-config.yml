# Organization-level Security Configuration Template
# This file provides standardized security configurations that can be copied
# to other repositories in the organization for consistent security practices.

# Security Policy Template
security_policy:
  # Copy this to SECURITY.md in target repositories
  template: |
    # Security Policy
    
    ## Supported Versions
    
    We provide security updates for the following versions:
    
    | Version | Supported          |
    | ------- | ------------------ |
    | Latest  | :white_check_mark: |
    | < Latest| :x:                |
    
    ## Reporting a Vulnerability
    
    Please report security vulnerabilities by:
    
    1. **Private Reporting**: Use GitHub's private security advisory feature
    2. **Email**: Contact security@organization.com (if applicable)
    3. **Issue Template**: Use our security vulnerability template
    
    ### What to Include
    
    - Description of the vulnerability
    - Steps to reproduce
    - Potential impact assessment
    - Suggested mitigation (if any)
    
    ### Response Timeline
    
    - **Acknowledgment**: Within 48 hours
    - **Initial Assessment**: Within 1 week
    - **Resolution**: Based on severity (Critical: 1-7 days, High: 1-30 days)
    
    ## Security Best Practices
    
    ### For Contributors
    - Never commit secrets, tokens, or credentials
    - Use environment variables for sensitive configuration
    - Run security scans before submitting PRs
    - Follow secure coding guidelines
    
    ### For Maintainers
    - Enable GitHub security features (Dependabot, Code Scanning, Secret Scanning)
    - Review and approve all security-related changes
    - Keep dependencies updated
    - Monitor security advisories

# Dependabot Configuration Template
dependabot_config:
  # Copy this to .github/dependabot.yml in target repositories
  template: |
    version: 2
    updates:
      # Package ecosystem configurations
      - package-ecosystem: "npm"
        directory: "/"
        schedule:
          interval: "weekly"
          day: "monday"
          time: "09:00"
        open-pull-requests-limit: 5
        reviewers:
          - "organization-team"
        assignees:
          - "security-team"
        commit-message:
          prefix: "security"
          include: "scope"
        
      - package-ecosystem: "pip"
        directory: "/"
        schedule:
          interval: "weekly"
          day: "monday" 
          time: "09:00"
        open-pull-requests-limit: 5
        reviewers:
          - "organization-team"
        assignees:
          - "security-team"
        commit-message:
          prefix: "security"
          include: "scope"
          
      - package-ecosystem: "docker"
        directory: "/"
        schedule:
          interval: "weekly"
          day: "tuesday"
          time: "09:00"
        open-pull-requests-limit: 3
        reviewers:
          - "organization-team"
        assignees:
          - "security-team"
        commit-message:
          prefix: "security"
          include: "scope"
          
      - package-ecosystem: "github-actions"
        directory: "/"
        schedule:
          interval: "weekly"
          day: "wednesday"
          time: "09:00"
        open-pull-requests-limit: 3
        reviewers:
          - "organization-team"
        assignees:
          - "security-team"
        commit-message:
          prefix: "security"
          include: "scope"

# CodeQL Configuration Template
codeql_config:
  # Copy this to .github/workflows/codeql-analysis.yml in target repositories
  template: |
    name: "CodeQL Analysis"
    
    on:
      push:
        branches: [ main, master, develop ]
      pull_request:
        branches: [ main, master, develop ]
      schedule:
        - cron: '0 2 * * 1'  # Weekly on Mondays at 2 AM
    
    jobs:
      analyze:
        name: Analyze
        runs-on: ubuntu-latest
        permissions:
          actions: read
          contents: read
          security-events: write
        
        strategy:
          fail-fast: false
          matrix:
            language: [ 'javascript', 'python' ]  # Customize based on your languages
        
        steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        
        - name: Initialize CodeQL
          uses: github/codeql-action/init@v3
          with:
            languages: ${{ matrix.language }}
            queries: security-extended,security-and-quality
        
        - name: Autobuild
          uses: github/codeql-action/autobuild@v3
        
        - name: Perform CodeQL Analysis
          uses: github/codeql-action/analyze@v3

# Branch Protection Rules Template
branch_protection:
  template: |
    # Branch Protection Rules (Configure via GitHub UI or API)
    
    ## Main/Master Branch Protection
    - Require pull request reviews before merging
    - Require status checks to pass before merging
    - Require branches to be up to date before merging
    - Require signed commits
    - Include administrators in restrictions
    - Restrict pushes that create files larger than 100MB
    
    ## Required Status Checks
    - Security Checks / security-checks
    - Docker Security / docker-security (for repositories with Docker)
    - CodeQL Analysis / analyze
    - Tests / test (if applicable)
    - Build / build (if applicable)
    
    ## Required Reviews
    - Number of required reviewers: 1
    - Dismiss stale reviews when new commits are pushed: true
    - Require review from code owners: true

# Security Workflow Integration
security_workflows:
  # Template for integrating security checks into existing workflows
  integration_example: |
    # Add this job to your existing workflows
    
    security-checks:
      name: Security Analysis
      uses: sparck75/alteriom-docker-images/.github/workflows/reusable-security-checks.yml@main
      with:
        enable-dependency-check: true
        enable-secret-scan: true
        enable-code-analysis: true
      secrets: inherit
    
    docker-security:
      name: Docker Security
      if: contains(github.repository, 'docker') || contains(github.repository, 'container')
      uses: sparck75/alteriom-docker-images/.github/workflows/reusable-docker-security.yml@main
      with:
        image-name: ${{ github.repository }}
        dockerfile-path: "./Dockerfile"
      secrets: inherit

# Issue Template Inheritance
issue_template_setup:
  instructions: |
    # Setting Up Organizational Issue Templates
    
    ## Option 1: Repository-level Setup
    1. Copy templates from alteriom-docker-images/.github/ISSUE_TEMPLATE/
    2. Customize the config.yml with your repository URLs
    3. Modify templates as needed for your specific use case
    
    ## Option 2: Organization-level Setup (.github repository)
    1. Create a public repository named '.github' in your organization
    2. Copy all templates to .github/.github/ISSUE_TEMPLATE/
    3. All repositories in the organization will inherit these templates
    4. Individual repositories can override by creating their own templates
    
    ## Templates Available
    - bug_report.md: General bug reporting
    - docker_build_issue.md: Docker-specific build issues
    - documentation_improvement.md: Documentation requests
    - feature_request.md: New feature requests
    - platform_support.md: Platform/compatibility issues
    - security_vulnerability.md: Security issue reporting
    - config.yml: Contact links and configuration